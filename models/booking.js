Object.defineProperty(exports, "__esModule", { value: true });
var Booking = /** @class */ (function () {
    function Booking() {
    }
    return Booking;
}());
exports.Booking = Booking;
var NewBooking = /** @class */ (function () {
    function NewBooking() {
    }
    return NewBooking;
}());
exports.NewBooking = NewBooking;
var BookingListItem = /** @class */ (function () {
    function BookingListItem() {
    }
    return BookingListItem;
}());
exports.BookingListItem = BookingListItem;
var GetBookingsRequest = /** @class */ (function () {
    function GetBookingsRequest() {
    }
    return GetBookingsRequest;
}());
exports.GetBookingsRequest = GetBookingsRequest;
var GetBookingSolution = /** @class */ (function () {
    function GetBookingSolution() {
        this.CoTravellers = [];
        this.Equipment = [];
    }
    return GetBookingSolution;
}());
exports.GetBookingSolution = GetBookingSolution;
var GetBookingSolutionReply = /** @class */ (function () {
    function GetBookingSolutionReply() {
        this.Errors = [];
    }
    return GetBookingSolutionReply;
}());
exports.GetBookingSolutionReply = GetBookingSolutionReply;
var ResponseAddress = /** @class */ (function () {
    function ResponseAddress() {
    }
    return ResponseAddress;
}());
exports.ResponseAddress = ResponseAddress;
var ResponseCoTravellers = /** @class */ (function () {
    function ResponseCoTravellers() {
    }
    return ResponseCoTravellers;
}());
exports.ResponseCoTravellers = ResponseCoTravellers;
var ResponseEquipments = /** @class */ (function () {
    function ResponseEquipments() {
    }
    return ResponseEquipments;
}());
exports.ResponseEquipments = ResponseEquipments;
var Job = /** @class */ (function () {
    function Job() {
    }
    return Job;
}());
exports.Job = Job;
var Node = /** @class */ (function () {
    function Node() {
    }
    return Node;
}());
exports.Node = Node;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9va2luZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJvb2tpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0lBQUE7SUEwQkEsQ0FBQztJQUFELGNBQUM7QUFBRCxDQUFDLEFBMUJELElBMEJDO0FBMUJZLDBCQUFPO0FBNEJwQjtJQUFBO0lBRUEsQ0FBQztJQUFELGlCQUFDO0FBQUQsQ0FBQyxBQUZELElBRUM7QUFGWSxnQ0FBVTtBQUl2QjtJQUFBO0lBcUJBLENBQUM7SUFBRCxzQkFBQztBQUFELENBQUMsQUFyQkQsSUFxQkM7QUFyQlksMENBQWU7QUF1QjVCO0lBQUE7SUFLQSxDQUFDO0lBQUQseUJBQUM7QUFBRCxDQUFDLEFBTEQsSUFLQztBQUxZLGdEQUFrQjtBQU0vQjtJQUFBO1FBS0ksaUJBQVksR0FBa0IsRUFBRSxDQUFDO1FBQ2pDLGNBQVMsR0FBa0IsRUFBRSxDQUFDO0lBTWxDLENBQUM7SUFBRCx5QkFBQztBQUFELENBQUMsQUFaRCxJQVlDO0FBWlksZ0RBQWtCO0FBYy9CO0lBQUE7UUFPSSxXQUFNLEdBQWUsRUFBRSxDQUFDO0lBSzVCLENBQUM7SUFBRCw4QkFBQztBQUFELENBQUMsQUFaRCxJQVlDO0FBWlksMERBQXVCO0FBY3BDO0lBQUE7SUFPQSxDQUFDO0lBQUQsc0JBQUM7QUFBRCxDQUFDLEFBUEQsSUFPQztBQVBZLDBDQUFlO0FBUTVCO0lBQUE7SUFPQSxDQUFDO0lBQUQsMkJBQUM7QUFBRCxDQUFDLEFBUEQsSUFPQztBQVBZLG9EQUFvQjtBQVFqQztJQUFBO0lBTUEsQ0FBQztJQUFELHlCQUFDO0FBQUQsQ0FBQyxBQU5ELElBTUM7QUFOWSxnREFBa0I7QUFRL0I7SUFBQTtJQWlCQSxDQUFDO0lBQUQsVUFBQztBQUFELENBQUMsQUFqQkQsSUFpQkM7QUFqQlksa0JBQUc7QUFrQmhCO0lBQUE7SUFnQkEsQ0FBQztJQUFELFdBQUM7QUFBRCxDQUFDLEFBaEJELElBZ0JDO0FBaEJZLG9CQUFJIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIEJvb2tpbmcge1xyXG4gICAgQWRkcmVzc1N0YXJ0OiBSZXNwb25zZUFkZHJlc3M7XHJcbiAgICBBZGRyZXNzRW5kOiBSZXNwb25zZUFkZHJlc3M7XHJcbiAgICBBbG9uZUluVmVoaWNsZTogYm9vbGVhbjtcclxuICAgIEFzc2lzdGFuY2VGcm9tOiB7IEFzc2lzdGFuY2VJZDogbnVtYmVyLCBOYW1lOiBzdHJpbmcgfTtcclxuICAgIEFzc2lzdGFuY2VUbzogeyBBc3Npc3RhbmNlSWQ6IG51bWJlciwgTmFtZTogc3RyaW5nIH07XHJcbiAgICBCb29raW5nSWQ6IG51bWJlcjtcclxuICAgIEJvb2tpbmdOYnI/OiBzdHJpbmc7XHJcbiAgICBCb29raW5nU3RhdGU6IG51bWJlcjtcclxuICAgIEJvb2tpbmdTdGF0ZVN0cmluZzogc3RyaW5nO1xyXG4gICAgQ29UcmF2ZWxsZXJzOiBBcnJheTxSZXNwb25zZUNvVHJhdmVsbGVycz47XHJcbiAgICBDb250YWN0UGhvbmVOdW1iZXI/OiBzdHJpbmc7XHJcbiAgICBFcXVpcG1lbnRzOiBBcnJheTxSZXNwb25zZUVxdWlwbWVudHM+O1xyXG4gICAgSGFuZE92ZXI6IGJvb2xlYW47XHJcbiAgICBIYW5kT3ZlckluZm86IGJvb2xlYW47XHJcbiAgICBIYXNCZWVuUmF0ZWQ6IGJvb2xlYW47XHJcbiAgICBKb2JzOiBBcnJheTxKb2I+O1xyXG4gICAgTmJyTWluRGVsYXllZDogbnVtYmVyO1xyXG4gICAgUm91dGluZUlkOiBudW1iZXI7XHJcbiAgICBTZWF0aW5nVHlwZTogeyBOYW1lOiBzdHJpbmcsIFNlYXRpbmdUeXBlSWQ6IG51bWJlciB9O1xyXG4gICAgU2VydmljZUZlZTogc3RyaW5nO1xyXG4gICAgVGlja2V0VHlwZTogeyBDb2RlOiBzdHJpbmcsIE5hbWU6IHN0cmluZyB9O1xyXG4gICAgVGltZURyb3BFc3RpbWF0ZWQ6IERhdGU7XHJcbiAgICBUaW1lUGlja3VwRGVsYXllZDogRGF0ZTtcclxuICAgIFRpbWVQaWNrdXBOZWdvdGlhdGVkOiBEYXRlO1xyXG4gICAgVGltZVR5cGU6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE5ld0Jvb2tpbmcge1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEJvb2tpbmdMaXN0SXRlbSB7XHJcbiAgICBBZGRyZXNzU3RhcnQ6IFJlc3BvbnNlQWRkcmVzcztcclxuICAgIEFkZHJlc3NFbmQ6IFJlc3BvbnNlQWRkcmVzcztcclxuICAgIEJvb2tpbmdJZDogbnVtYmVyO1xyXG4gICAgQm9va2luZ05icj86IHN0cmluZztcclxuICAgIEJvb2tpbmdTdGF0ZTogbnVtYmVyO1xyXG4gICAgQm9va2luZ1N0YXRlU3RyaW5nOiBzdHJpbmc7XHJcbiAgICBDdXN0b21lcj86IGFueTtcclxuICAgIERyaXZlckFzc2lzdGFuY2U/OiBhbnk7XHJcbiAgICBFcXVpcG1lbnQ/OiBhbnk7XHJcbiAgICBIYXNHcHNQb3NpdGlvbj86IGFueTtcclxuICAgIFJvdXRpbmU/OiBzdHJpbmc7XHJcbiAgICBSb3V0aW5lSWQ6IG51bWJlcjtcclxuICAgIFNlYXRpbmdUeXBlOiB7IE5hbWU6IHN0cmluZywgU2VhdGluZ1R5cGVJZDogbnVtYmVyIH07XHJcbiAgICBTZXJ2aWNlRmVlOiBzdHJpbmc7XHJcbiAgICBTZXJ2aWNlRmVlSW52b2NpZWQ6IGJvb2xlYW47XHJcbiAgICBUaW1lRHJvcEVzdGltYXRlZDogRGF0ZTtcclxuICAgIFRpbWVQaWNrdXBEZWxheWVkOiBEYXRlO1xyXG4gICAgVGltZVBpY2t1cE5lZ290aWF0ZWQ6IERhdGU7XHJcbiAgICBUaW1lUGlja3VwUGxhbm5lZDogRGF0ZTtcclxuICAgIFRpbWVTdGF0dXNDaGFuZ2VkOiBEYXRlO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgR2V0Qm9va2luZ3NSZXF1ZXN0IHtcclxuICAgIFN0YXJ0RGF0ZT86IERhdGU7XHJcbiAgICBFbmREYXRlPzogRGF0ZTtcclxuICAgIExpbWl0PzogbnVtYmVyO1xyXG4gICAgT2Zmc2V0PzogbnVtYmVyO1xyXG59XHJcbmV4cG9ydCBjbGFzcyBHZXRCb29raW5nU29sdXRpb24ge1xyXG4gICAgQWRkcmVzc0Zyb206IG51bWJlcjtcclxuICAgIEFkZHJlc3NUbzogbnVtYmVyO1xyXG4gICAgQXNzaXN0YW5jZURyb3A/OiBudW1iZXI7XHJcbiAgICBBc3Npc3RhbmNlUGlja3VwPzogbnVtYmVyO1xyXG4gICAgQ29UcmF2ZWxsZXJzOiBBcnJheTxPYmplY3Q+ID0gW107XHJcbiAgICBFcXVpcG1lbnQ6IEFycmF5PE9iamVjdD4gPSBbXTtcclxuICAgIExlZ0lkOiBudW1iZXI7XHJcbiAgICBTZWF0aW5nVHlwZTogbnVtYmVyO1xyXG4gICAgVGlja2V0VHlwZTogc3RyaW5nO1xyXG4gICAgVGltZVR5cGU6IHN0cmluZztcclxuICAgIFRpbWVXYW50ZWQ6IERhdGU7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBHZXRCb29raW5nU29sdXRpb25SZXBseSB7XHJcbiAgICBDYXBhY2l0eUluZm86IHN0cmluZztcclxuICAgIENvbnRhY3RJbmZvOiBzdHJpbmc7XHJcbiAgICBDdXN0b21lckNvc3Q6IHN0cmluZztcclxuICAgIEN1c3RvbWVyQ29zdEluZm86IHN0cmluZztcclxuICAgIEN1c3RvbWVyR3VpZGFuY2VJbmZvOiBhbnk7XHJcbiAgICBFcXVpcG1lbnRJbmZvOiBzdHJpbmc7XHJcbiAgICBFcnJvcnM6IEFycmF5PGFueT4gPSBbXTtcclxuICAgIFBhc3Nlbmdlcjogc3RyaW5nO1xyXG4gICAgU2VhdGluZ0luZm86IHN0cmluZztcclxuICAgIEJvb2tpbmc6IEJvb2tpbmc7XHJcblxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUmVzcG9uc2VBZGRyZXNzIHtcclxuICAgIEFkZHJlc3NJZDogbnVtYmVyO1xyXG4gICAgTmFtZTogc3RyaW5nO1xyXG4gICAgR3BzTG9jYXRpb246IHtcclxuICAgICAgICBMYXRpdHVkZTogbnVtYmVyO1xyXG4gICAgICAgIExvbmdpdHVkZTogbnVtYmVyO1xyXG4gICAgfTtcclxufVxyXG5leHBvcnQgY2xhc3MgUmVzcG9uc2VDb1RyYXZlbGxlcnMge1xyXG4gICAgS2V5OiB7XHJcbiAgICAgICAgQ29UcmF2ZWxsZXJDb2RlPzogbnVtYmVyO1xyXG4gICAgICAgIENvVHJhdmVsbGVySWQ6IG51bWJlcjtcclxuICAgICAgICBOYW1lOiBzdHJpbmdcclxuICAgIH07XHJcbiAgICBWYWx1ZTogbnVtYmVyO1xyXG59XHJcbmV4cG9ydCBjbGFzcyBSZXNwb25zZUVxdWlwbWVudHMge1xyXG4gICAgS2V5OiB7XHJcbiAgICAgICAgRXF1aXBtZW50SWQ6IG51bWJlcjtcclxuICAgICAgICBOYW1lOiBzdHJpbmdcclxuICAgIH07XHJcbiAgICBWYWx1ZTogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgSm9iIHtcclxuICAgIEJvb2tpbmdJZDogbnVtYmVyO1xyXG4gICAgQ29UcmF2ZWxsZXJzO1xyXG4gICAgRXF1aXBtZW50O1xyXG4gICAgRXh0cmE7XHJcbiAgICBKb2JJZDogbnVtYmVyO1xyXG4gICAgSm9iU3RhdGU6IG51bWJlcjtcclxuICAgIEpvYlN0YXRlQ2hhbmdlZFRpbWVzdGFtcDogRGF0ZTtcclxuICAgIEpvYlN0YXRlU3RyaW5nOiBzdHJpbmc7XHJcbiAgICBKb2JUeXBlOiBudW1iZXI7XHJcbiAgICBMaW5lSW5mbztcclxuICAgIExvY2F0aW9uSW5mbztcclxuICAgIE5vZGVzOiBBcnJheTxOb2RlPjtcclxuICAgIFNlcnZpY2VGZWU7XHJcbiAgICBTZXJ2aWNlRmVlVmFsdWU7XHJcbiAgICBWZWhpY2xlSW5mbztcclxuXHJcbn1cclxuZXhwb3J0IGNsYXNzIE5vZGUge1xyXG4gICAgQWRkcmVzczogUmVzcG9uc2VBZGRyZXNzO1xyXG4gICAgQXNzaXN0YW5jZTogeyBBc3Npc3RhbmNlSWQ6IG51bWJlciwgTmFtZTogc3RyaW5nIH07XHJcbiAgICBCb29raW5nSWQ6IG51bWJlcjtcclxuICAgIERyaXZlclNlc3Npb25FeGVjVW5pdElkOiBudW1iZXI7XHJcbiAgICBOb2RlU3RhdHVzOiBudW1iZXI7XHJcbiAgICBOb2RlU3RhdHVzU3RyaW5nOiBzdHJpbmc7XHJcbiAgICBOb2RlVHlwZTogbnVtYmVyO1xyXG4gICAgTm9kZVR5cGVTdHJpbmc6IHN0cmluZztcclxuICAgIFBob25lTnVtYmVyOiBzdHJpbmc7XHJcbiAgICBUaW1lRGVsYXllZDogRGF0ZTtcclxuICAgIFRpbWVFeGVjdXRlZDogRGF0ZTtcclxuICAgIFRpbWVOZWdvdGlhdGVkOiBEYXRlO1xyXG4gICAgVGltZVBsYW5uZWQ6IERhdGU7XHJcbiAgICBUaW1lVHlwZTogbnVtYmVyO1xyXG4gICAgVGltZVR5cGVTdHJpbmc6IHN0cmluZztcclxufVxyXG5cclxuXHJcbiJdfQ==